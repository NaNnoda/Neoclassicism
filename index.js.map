{
  "version": 3,
  "sources": ["Scripts/CanvasManager.ts", "Scripts/vars.ts", "Scripts/Math/Random.ts", "Scripts/Math/NoiseMap.ts", "Scripts/Drawer.ts", "Scripts/Events.ts", "Scripts/index.ts"],
  "sourcesContent": ["export class CanvasManager {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.initCanvas();\n    }\n\n    initCanvas() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n    }\n\n    draw() {\n        this.ctx.fillStyle = \"red\";\n        this.ctx.fillRect(0, 0, 100, 100);\n    }\n\n    drawPixelArray(array: number[][]) {\n        for (let i = 0; i < array.length; i++) {\n            for (let j = 0; j < array[i].length; j++) {\n                this.ctx.fillStyle = \"rgb(\" + array[i][j] + \",\" + array[i][j] + \",\" + array[i][j] + \")\";\n                this.ctx.fillRect(i, j, 1, 1);\n            }\n        }\n    }\n}", "export const canvas = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\nexport const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;", "export class Random {\n    _seed: number;\n\n    static i: Random = new Random(new Date().getTime());\n\n    static get instance() {\n        return Random.i;\n    }\n\n    setSeed(seed: number) {\n        this._seed = seed;\n    }\n\n    constructor(seed: number) {\n        this._seed = seed;\n    }\n\n    next() {\n        let x = Math.sin(this._seed++) * 10000;\n        return x - Math.floor(x);\n    }\n\n    nextInt(max: number) {\n        return Math.floor(this.next() * max);\n    }\n\n    nextIntRange(min: number, max: number) {\n        return min + this.nextInt(max - min);\n    }\n\n    nextFloat() {\n        return this.next();\n    }\n}\n", "import {Random} from \"./Random\";\nimport {INoiseMap} from \"./INoise\";\n\nexport class NoiseMap implements INoiseMap{\n    array: number[][] = [];\n    isFloat: boolean ;\n\n\n    constructor(width: number, height: number, max:number = 256, min:number = 0, isFloat: boolean = false) {\n        for (let i = 0; i < width; i++) {\n            this.array.push([]);\n            for (let j = 0; j < height; j++) {\n                this.array[i].push(Random.instance.next());\n            }\n        }\n        this.isFloat = isFloat;\n        this.generateNoiseMap(max, min);\n\n    }\n\n\n    toString(){\n        let str = \"\";\n        for (let i = 0; i < this.array.length; i++) {\n            for (let j = 0; j < this.array[i].length; j++) {\n                str += this.array[i][j] + \" \";\n            }\n            str += \"\\n\";\n        }\n        return str;\n    }\n\n    generateNoiseMap(max:number, min:number): void {\n        for (let i = 0; i < this.array.length; i++) {\n            for (let j = 0; j < this.array[i].length; j++) {\n                this.array[i][j] = this.array[i][j] * (max - min) + min;\n\n                if (!this.isFloat) {\n                    this.array[i][j] = Math.floor(this.array[i][j]);\n                }\n            }\n        }\n    }\n\n    getNoiseMap(): number[][] {\n        return this.array;\n    }\n}", "import {ctx} from \"./vars\";\n\nexport function drawPixelArray(array: number[][]) {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n            ctx.fillStyle = \"rgb(\" + array[i][j] + \",\" + array[i][j] + \",\" + array[i][j] + \")\";\n            ctx.fillRect(i, j, 1, 1);\n        }\n    }\n}", "import {drawPixelArray} from \"./Drawer\";\nimport {NoiseMap} from \"./Math/NoiseMap\";\n\nwindow.requestAnimationFrame(frameUpdateCaller);\nexport function frameUpdateCaller(){\n    frameUpdate();\n    window.requestAnimationFrame(frameUpdateCaller);\n}\n\nexport function frameUpdate() {\n    console.log(\"Frame update called\");\n\n    drawPixelArray(new NoiseMap(100, 100).getNoiseMap());\n}\n\nexport function keyDown(event: KeyboardEvent) {\n    console.log(event.key);\n}\n\n", "import {CanvasManager} from \"./CanvasManager\";\nimport {canvas} from \"./vars\";\nimport {NoiseMap} from \"./Math/NoiseMap\";\nimport {frameUpdateCaller, keyDown} from \"./Events\";\n\nconsole.log(\"Loading index.ts\");\n\nfunction main() {\n    let canvasManager = new CanvasManager(canvas);\n\n    document.addEventListener('keydown', keyDown);\n    frameUpdateCaller();\n\n\n    canvasManager.draw();\nlet noise = new NoiseMap(100, 100, 255, 0);\n    console.log(noise.toString());\n\n    canvasManager.drawPixelArray(noise.getNoiseMap());\n\n}\n\nmain();\n\nconsole.log(\"Loaded index.ts\");"],
  "mappings": "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",
  "names": ["canvas"]
}
