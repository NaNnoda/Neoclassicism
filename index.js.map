{
  "version": 3,
  "sources": ["node_modules/gl-matrix/esm/common.js", "node_modules/gl-matrix/esm/mat4.js", "node_modules/gl-matrix/esm/vec3.js", "Scripts/Consts.ts", "Scripts/Drawer.ts", "Scripts/Object3Ds/Camera3D.ts", "Scripts/Object3Ds/World3D.ts", "Scripts/Math/Math3D.ts", "Scripts/Object3Ds/TriangularPrism.ts", "Scripts/Object3Ds/Viewport.ts", "Scripts/Debug.ts", "Scripts/Math/Random.ts", "Scripts/SmoothNumber.ts", "Scripts/Object3Ds/Plane3D.ts", "Scripts/point.ts", "Scripts/Object3Ds/GridCell.ts", "Scripts/Object3Ds/Grid3D.ts", "Scripts/Object3Ds/PerspectiveProjection.ts", "Scripts/GameGrid.ts", "Scripts/Events.ts", "Scripts/Init.ts", "Scripts/Game.ts", "Scripts/Main.ts"],
  "sourcesContent": ["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import {onStart} from \"./Events\";\r\n\r\nexport const mainCanvas = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\r\nexport const mainCtx = mainCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\nexport let height = 500;\r\nexport let width = 500;\r\n\r\nmainCanvas.height = height;\r\nmainCanvas.width = width;\r\n\r\nexport let aspectRatio = height / width;\r\n\r\nexport let scoreText = createText(\"score\", \"Score: 0\");\r\nscoreText.style.display = \"none\";\r\nexport let startBtn = createButton(\"startBtn\", \"Start\", () => {\r\n    startBtn.style.display = \"none\";\r\n    onStart();\r\n});\r\n\r\nexport let descriptionText = createText(\r\n    \"description\",`\r\n    How to play:\r\n    - Use the arrow keys/WASD to move the player(green pixel)\r\n    - Collect as much coins (yellow pixel) as possible\r\n    - Avoid danger zone! (red area)\r\nAlso try:\r\n- Use left/right/middle key of the mouse ot drag the canvas or use sliders to change the camera.\r\n`);\r\n\r\nexport let prismPos = createSliders(\"prismPos\");\r\nexport let curveSize = createSliders(\"curveSize\", 0.3, -2, 2, 0.001);\r\n// export let slider2 = createSliders(\"2\", 0, -100, 10000);\r\nexport let targetX = createSliders(\"targetX\", 0);\r\nexport let targetY = createSliders(\"targetY\", 0);\r\nexport let targetZ = createSliders(\"targetZ\", 0);\r\nexport let eyeX = createSliders(\"eyeX\", 68);\r\nexport let eyeY = createSliders(\"eyeY\", 100);\r\nexport let eyeZ = createSliders(\"eyeZ\", 0);\r\nexport let upX = createSliders(\"upX\", 0);\r\nexport let upY = createSliders(\"upY\", 1);\r\nexport let upZ = createSliders(\"upZ\", 0);\r\nexport let worldX = createSliders(\"worldX\", -19)\r\nexport let worldY = createSliders(\"worldY\", -17);\r\n\r\nfunction createSliders(id: string, defaultVal: number = 0, min: number = -200, max: number = 200, step: number = 0.01) {\r\n    let slider = document.createElement(\"input\");\r\n\r\n    slider.step = step.toString();\r\n    slider.type = \"range\";\r\n    slider.min = min.toString();\r\n    slider.max = max.toString();\r\n    slider.value = defaultVal.toString();\r\n    slider.id = id;\r\n    slider.onchange = () => {\r\n        console.log(`slider ${id} changed to ${slider.value}`);\r\n    }\r\n    let sliderLabel = document.createElement(\"label\");\r\n    sliderLabel.htmlFor = id;\r\n    sliderLabel.innerText = id;\r\n    let sliderDiv = document.createElement(\"div\");\r\n    sliderDiv.appendChild(sliderLabel);\r\n    sliderDiv.appendChild(slider);\r\n    document.body.appendChild(sliderDiv);\r\n    return slider;\r\n}\r\n\r\nfunction createButton(id: string, text: string, callback: () => void) {\r\n    let button = document.createElement(\"button\");\r\n    button.id = id;\r\n    button.innerText = text;\r\n    button.onclick = callback;\r\n    document.body.appendChild(button);\r\n    return button;\r\n}\r\n\r\n\r\nfunction createText(id: string, ...lines: string[]) {\r\n    let textDiv = document.createElement(\"div\");\r\n    textDiv.id = id;\r\n    for (let line of lines) {\r\n        let text = document.createElement(\"p\");\r\n        text.innerText = line;\r\n        textDiv.appendChild(text);\r\n    }\r\n\r\n    document.body.appendChild(textDiv);\r\n    return textDiv;\r\n}\r\n", "import {mat4, vec3} from \"gl-matrix\";\r\nimport {mainCanvas, mainCtx} from \"./Consts\";\r\n\r\nexport function clearCanvas() {\r\n    mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height);\r\n}\r\n\r\nexport function renderAxes(color: string, transformMatrix: mat4) {\r\n\r\n    mainCtx.strokeStyle = color;\r\n    mainCtx.lineWidth = 1;\r\n    mainCtx.beginPath();\r\n    // Axes\r\n    moveToTx([1.2, 0, 0], transformMatrix, mainCtx);\r\n    lineToTx([-1.2, 0, 0], transformMatrix, mainCtx);\r\n    moveToTx([0, 0, 0], transformMatrix, mainCtx);\r\n    lineToTx([0, 1.2, 0], transformMatrix, mainCtx);\r\n    lineToTx([0, -1.2, 0], transformMatrix, mainCtx);\r\n    moveToTx([0, 0, 0], transformMatrix, mainCtx);\r\n    lineToTx([0, 0, 1.2], transformMatrix, mainCtx);\r\n    lineToTx([0, 0, -1.2], transformMatrix, mainCtx);\r\n    // Arrowheads\r\n    moveToTx([1.1, .05, 0], transformMatrix, mainCtx);\r\n    lineToTx([1.2, 0, 0], transformMatrix, mainCtx);\r\n    lineToTx([1.1, -.05, 0], transformMatrix, mainCtx);\r\n    moveToTx([.05, 1.1, 0], transformMatrix, mainCtx);\r\n    lineToTx([0, 1.2, 0], transformMatrix, mainCtx);\r\n    lineToTx([-.05, 1.1, 0], transformMatrix, mainCtx);\r\n    moveToTx([.05, 0, 1.1], transformMatrix, mainCtx);\r\n    lineToTx([0, 0, 1.2], transformMatrix, mainCtx);\r\n    lineToTx([-.05, 0, 1.1], transformMatrix, mainCtx);\r\n    // X-label\r\n    moveToTx([1.3, -.05, 0], transformMatrix, mainCtx);\r\n    lineToTx([1.4, .05, 0], transformMatrix, mainCtx);\r\n    moveToTx([1.3, .05, 0], transformMatrix, mainCtx);\r\n    lineToTx([1.4, -.05, 0], transformMatrix, mainCtx);\r\n    // Y-label\r\n    moveToTx([-.05, 1.4, 0], transformMatrix, mainCtx);\r\n    lineToTx([0, 1.35, 0], transformMatrix, mainCtx);\r\n    lineToTx([.05, 1.4, 0], transformMatrix, mainCtx);\r\n    moveToTx([0, 1.35, 0], transformMatrix, mainCtx);\r\n    lineToTx([0, 1.28, 0], transformMatrix, mainCtx);\r\n    // Z-label\r\n    moveToTx([-.05, 0, 1.3], transformMatrix, mainCtx);\r\n    lineToTx([.05, 0, 1.3], transformMatrix, mainCtx);\r\n    lineToTx([-.05, 0, 1.4], transformMatrix, mainCtx);\r\n    lineToTx([.05, 0, 1.4], transformMatrix, mainCtx);\r\n\r\n    mainCtx.stroke();\r\n}\r\n\r\nexport function lineToTx(loc: vec3, Tx: mat4, context: CanvasRenderingContext2D) {\r\n    // console.log(\"lineToTx\");\r\n    let res = vec3.create();\r\n    vec3.transformMat4(res, loc, Tx);\r\n    context.lineTo(res[0], res[1]);\r\n}\r\n\r\nexport function moveToTx(loc: vec3, Tx: mat4, context: CanvasRenderingContext2D) {\r\n    let res = vec3.create();\r\n    vec3.transformMat4(res, loc, Tx);\r\n    context.moveTo(res[0], res[1]);\r\n}\r\n\r\nexport function drawLine3D(start: vec3, end: vec3, transformMatrix: mat4) {\r\n    mainCtx.beginPath();\r\n    moveToTx(start, transformMatrix, mainCtx);\r\n    lineToTx(end, transformMatrix, mainCtx);\r\n    mainCtx.stroke();\r\n}\r\n\r\nexport function drawTriangle3D(p1: vec3, p2: vec3, p3: vec3, transformMatrix: mat4) {\r\n    mainCtx.beginPath();\r\n    moveToTx(p1, transformMatrix, mainCtx);\r\n    lineToTx(p2, transformMatrix, mainCtx);\r\n    lineToTx(p3, transformMatrix, mainCtx);\r\n    lineToTx(p1, transformMatrix, mainCtx);\r\n    mainCtx.fill();\r\n    mainCtx.stroke();\r\n}\r\n\r\nexport function drawBackground(color: string = \"white\") {\r\n    mainCtx.fillStyle = color;\r\n    mainCtx.fillRect(0, 0, mainCanvas.width, mainCanvas.height);\r\n}\r\n\r\nexport function drawPlane3D(p1: vec3, p2: vec3, p3: vec3, p4: vec3, transformMatrix: mat4) {\r\n    mainCtx.beginPath();\r\n    moveToTx(p1, transformMatrix, mainCtx);\r\n    lineToTx(p2, transformMatrix, mainCtx);\r\n    lineToTx(p3, transformMatrix, mainCtx);\r\n    lineToTx(p4, transformMatrix, mainCtx);\r\n    lineToTx(p1, transformMatrix, mainCtx);\r\n    mainCtx.fill();\r\n    mainCtx.stroke();\r\n}\r\n\r\nexport function drawLongLine3D(points: vec3[], transformMatrix: mat4) {\r\n    mainCtx.beginPath();\r\n    moveToTx(points[0], transformMatrix, mainCtx);\r\n    for (let i = 1; i < points.length; i++) {\r\n        lineToTx(points[i], transformMatrix, mainCtx);\r\n    }\r\n    mainCtx.stroke();\r\n}\r\n\r\nexport function drawHermitCurve(controls: vec3[], transformMatrix: mat4, ratio: number = 1) {\r\n    let step = 0.01;\r\n    function getPoints(controls, step, hermitPoints: vec3[]) {\r\n        if (controls.length < 4) {\r\n            return;\r\n        }\r\n        let p0 = controls[0];\r\n        let p1 = controls[1];\r\n        let p2 = controls[2];\r\n        let p3 = controls[3];\r\n        let t = 0;\r\n        while (t <= 1) {\r\n            let p = vec3.create();\r\n            let t2 = t * t;\r\n            let t3 = t2 * t;\r\n            vec3.scaleAndAdd(p, p, p0, 2 * t3 - 3 * t2 + 1);\r\n            vec3.scaleAndAdd(p, p, p1, t3 - 2 * t2 + t);\r\n            vec3.scaleAndAdd(p, p, p2, -2 * t3 + 3 * t2);\r\n            vec3.scaleAndAdd(p, p, p3, t3 - t2);\r\n            hermitPoints.push(p);\r\n            t += step;\r\n        }\r\n    }\r\n\r\n    let end = controls.length / 4;\r\n    for (let i = 0; i < end; i++) {\r\n        let hermitPoints: vec3[] = [];\r\n        getPoints(controls.slice(i * 4, i * 4 + 4), step, hermitPoints);\r\n        drawLongLine3D(hermitPoints, transformMatrix);\r\n    }\r\n}\r\n", "import {mat4, vec2, vec3} from \"gl-matrix\";\r\n\r\nexport class Camera3D {\r\n    transformMatrix: mat4;\r\n    eye: vec3;\r\n    target: vec3;\r\n    up: vec3;\r\n\r\n    constructor() {\r\n        this.transformMatrix = mat4.create()\r\n        this.eye = vec3.fromValues(0, 0, 0)\r\n        this.target = vec3.fromValues(0, 0, 0)\r\n        this.up = vec3.fromValues(0, 1, 0)\r\n        mat4.lookAt(this.transformMatrix, this.eye, this.target, this.up)\r\n    }\r\n\r\n    setEye(eye: vec3) {\r\n        this.eye = eye\r\n        this.updateTransformMatrix()\r\n    }\r\n    setTarget(target: vec3) {\r\n        this.target = target\r\n        this.updateTransformMatrix()\r\n    }\r\n    setUp(up: vec3) {\r\n        this.up = up\r\n        this.updateTransformMatrix()\r\n    }\r\n\r\n    updateTransformMatrix() {\r\n        mat4.lookAt(this.transformMatrix, this.eye, this.target, this.up)\r\n    }\r\n\r\n    transformTo(t: mat4): mat4 {\r\n        this.transformMatrix = mat4.create()\r\n        mat4.lookAt(this.transformMatrix, this.eye, this.target, this.up)\r\n        mat4.multiply(this.transformMatrix, t, this.transformMatrix);\r\n        return this.transformMatrix;\r\n    }\r\n\r\n    inLimit(val: number) {\r\n        return true\r\n    }\r\n\r\n    moveEye = (offset: vec2) => {\r\n        this.eye[0] = this.inLimit(offset[0]) ? this.eye[0] + -offset[0] / 10 : this.eye[0];\r\n        this.eye[1] = this.inLimit(offset[1]) ? this.eye[1] + -offset[1] / 10 : this.eye[1];\r\n        mat4.lookAt(this.transformMatrix, this.eye, this.target, this.up);\r\n    }\r\n\r\n    get direction(): vec3 {\r\n        let raw = vec3.create()\r\n        vec3.sub(raw, this.target, this.eye)\r\n        return vec3.normalize(raw, raw)\r\n    }\r\n\r\n    get position(): vec3 {\r\n        return this.eye\r\n    }\r\n\r\n}\r\n", "import {mat4, vec3} from \"gl-matrix\";\r\n\r\nexport class World3D {\r\n    _scale: number;\r\n\r\n    _transformMatrix: mat4 = mat4.create();\r\n\r\n    constructor(scale: number = 10) {\r\n        this._scale = scale;\r\n        let m = mat4.create();\r\n        mat4.scale(m, m, [scale, scale, scale]);\r\n        this._transformMatrix = m;\r\n    }\r\n    get transformMatrix(): mat4 {\r\n        return this._transformMatrix;\r\n    }\r\n    transformTo(t: mat4): mat4 {\r\n        let m = this.transformMatrix;\r\n        mat4.multiply(m, t, m);\r\n        this._transformMatrix = m;\r\n        return m;\r\n    }\r\n    transformPoint(p: vec3): vec3 {\r\n        let m = this.transformMatrix;\r\n        let v = vec3.create();\r\n        vec3.transformMat4(v, p, m);\r\n        return v;\r\n    }\r\n\r\n    move(x: number, y: number, z: number): mat4 {\r\n        let m = mat4.create();\r\n        mat4.translate(m, m, [x, y, z]);\r\n        return this.transformTo(m);\r\n    }\r\n\r\n    scale(val: number): mat4 {\r\n        let m = mat4.create();\r\n        mat4.scale(m, m, [val, val, val]);\r\n        return this.transformTo(m);\r\n\r\n    }\r\n}\r\n", "import {vec3} from \"gl-matrix\";\r\n\r\n/**\r\n * Find the normal vector of a triangle.\r\n * @param p1\r\n * @param p2\r\n * @param p3\r\n */\r\nexport function getNormal(p1: vec3, p2: vec3, p3: vec3): vec3 {\r\n    let v1 = vec3.create();\r\n    let v2 = vec3.create();\r\n    let normal = vec3.create();\r\n    vec3.subtract(v1, p2, p1);\r\n    vec3.subtract(v2, p3, p1);\r\n    vec3.cross(normal, v1, v2);\r\n    vec3.normalize(normal, normal);\r\n    return normal;\r\n}\r\n\r\nexport function getCenter(points: vec3[]): vec3 {\r\n    let center = vec3.create();\r\n    for (let i = 0; i < points.length; i++) {\r\n        vec3.add(center, center, points[i]);\r\n    }\r\n    vec3.scale(center, center, 1 / points.length);\r\n    return center;\r\n}\r\n", "\r\n\r\nimport {mat4, vec3} from \"gl-matrix\";\r\nimport {drawLine3D, drawTriangle3D, lineToTx, moveToTx} from \"../Drawer\";\r\nimport {mainCtx} from \"../Consts\";\r\nimport IVisible3D from \"./IVisible3D\";\r\nimport {Camera3D} from \"./Camera3D\";\r\nimport {World3D} from \"./World3D\";\r\nimport {getCenter, getNormal} from \"../Math/Math3D\";\r\nimport {mat4ToString, vec3ToString} from \"../Debug\";\r\nimport {frameLog} from \"../Events\";\r\n\r\nexport class TriangularPrism implements IVisible3D {\r\n    // transformMatrix: mat4 = mat4.create();\r\n\r\n    points: vec3[] = [];\r\n\r\n    scale: number = 1;\r\n\r\n    _world: World3D;\r\n\r\n    rotation: number = 0;\r\n    rotationAxis: vec3 = vec3.fromValues(0, 1, 0);\r\n\r\n\r\n    constructor(p1: vec3, p2: vec3, p3: vec3, p4: vec3) {\r\n        this.points = [p1, p2, p3, p4];\r\n    }\r\n\r\n    get p1(): vec3 {\r\n        return this.points[0];\r\n    }\r\n\r\n    get p2(): vec3 {\r\n        return this.points[1];\r\n    }\r\n\r\n    get p3(): vec3 {\r\n        return this.points[2];\r\n    }\r\n\r\n    get p4(): vec3 {\r\n        return this.points[3];\r\n    }\r\n\r\n    get center(): vec3 {\r\n        return vec3.fromValues(\r\n            (this.p1[0] + this.p2[0] + this.p3[0] + this.p4[0]) / 4,\r\n            (this.p1[1] + this.p2[1] + this.p3[1] + this.p4[1]) / 4,\r\n            (this.p1[2] + this.p2[2] + this.p3[2] + this.p4[2]) / 4\r\n        );\r\n    }\r\n\r\n    public static createRegularPrism(top: vec3, size: number): TriangularPrism {\r\n        let p1 = top;\r\n        let sin = size * Math.sqrt(3) / 2;\r\n        let cos = size / 2;\r\n\r\n        let p2 = vec3.fromValues(p1[0] + sin, p1[1], p1[2] + sin);\r\n        let p3 = vec3.fromValues(p1[0] - cos, p1[1] + sin, p1[2] + sin);\r\n        let p4 = vec3.fromValues(p1[0] - cos, p1[1] - sin, p1[2] + sin);\r\n\r\n        return new TriangularPrism(p1, p2, p3, p4);\r\n    }\r\n\r\n    setWorld(world: World3D): this {\r\n        this._world = world;\r\n        return this;\r\n    }\r\n\r\n    offset(x: number = 0, y: number = 0, z: number = 0): this {\r\n        for (let point of this.points) {\r\n            vec3.add(point, point, [x, y, z]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    render(camera: Camera3D) {\r\n        mainCtx.strokeStyle = \"transparent\";\r\n        if (!this.visible) return;\r\n        if (!this._world) {\r\n            throw new Error(`World is not set for ${this.constructor.name}`);\r\n        }\r\n\r\n        let p1 = this.points[0];\r\n        let p2 = this.points[1];\r\n        let p3 = this.points[2];\r\n        let p4 = this.points[3];\r\n\r\n        let m = mat4.create();\r\n        mat4.fromTranslation(m, this.center);\r\n        mat4.rotate(m, m, this.rotation, this.rotationAxis)\r\n        mat4.scale(m, m, [this.scale, this.scale, this.scale]);\r\n        let t = this._world.transformMatrix;\r\n        mat4.multiply(m, t, m);\r\n        let p1t = vec3.transformMat4(vec3.create(), p1, m);\r\n        let p2t = vec3.transformMat4(vec3.create(), p2, m);\r\n        let p3t = vec3.transformMat4(vec3.create(), p3, m);\r\n        let p4t = vec3.transformMat4(vec3.create(), p4, m);\r\n\r\n        let normal1 = getNormal(p1t, p2t, p3t);\r\n        let normal2 = getNormal(p1t, p3t, p4t);\r\n        let normal3 = getNormal(p1t, p4t, p2t);\r\n        let normal4 = getNormal(p2t, p4t, p3t);\r\n        let normals = [normal1, normal2, normal3, normal4];\r\n        let triangles = [[p1, p2, p3], [p1, p3, p4], [p1, p4, p2], [p2, p4, p3]];\r\n\r\n\r\n\r\n\r\n        let dots = [];\r\n        for (let i = 0; i < normals.length; i++) {\r\n            let dot = vec3.dot(normals[i], camera.direction);\r\n            dots.push(dot);\r\n        }\r\n        let centers = [];\r\n        for (let i = 0; i < triangles.length; i++) {\r\n            centers.push(getCenter(triangles[i]));\r\n        }\r\n        let distances = centers.map(center => vec3.distance(center, camera.position));\r\n\r\n        function setColor(dotVal: number) {\r\n            let color = 255 - Math.abs(dotVal)   *125;\r\n            if (color < 0) color = 0;\r\n            if (color > 255) color = 255;\r\n            mainCtx.fillStyle = `rgb(${color}, ${color}, ${color})`;\r\n        }\r\n\r\n        let sorted = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            sorted.push({\r\n                index: i,\r\n                dot: dots[i],\r\n                distance: distances[i],\r\n            });\r\n        }\r\n        sorted.sort((a: any, b: any) => {\r\n            return -(b.distance - a.distance ) as number;\r\n        });\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            let color = i * 50;\r\n            mainCtx.fillStyle = `rgb(${color + 50}, ${color + 50}, ${color})`;\r\n            let currTriangle = triangles[sorted[i].index];\r\n            frameLog(`currIndex: ${sorted[i].index}`);\r\n            drawTriangle3D(currTriangle[0], currTriangle[1], currTriangle[2], m);\r\n        }\r\n    }\r\n\r\n    get visible(): boolean {\r\n        return true;\r\n    }\r\n}\r\n", "import {mat4} from \"gl-matrix\";\r\nimport {width} from \"../Consts\";\r\n\r\nexport const viewport = mat4.create();\r\nmat4.fromTranslation(viewport, [width / 2, width / 2, 0]);\r\nmat4.scale(viewport, viewport, [1, -1, 1]);\r\n\r\n", "import {mat4, vec3} from \"gl-matrix\";\r\n\r\nexport function mat4ToString(m: mat4, precision: number =2): string {\r\n    let longest = 0;\r\n    for (let i = 0; i < 16; i++) {\r\n        longest = Math.max(longest, m[i].toFixed(precision).length);\r\n    }\r\n    let s = \"\";\r\n    for (let i = 0; i < 16; i++) {\r\n        s += m[i].toFixed(precision).padStart(longest, \" \");\r\n        if (i % 4 == 3) {\r\n            s += \"\\n\";\r\n        } else {\r\n            s += \" \";\r\n        }\r\n    }\r\n    return s;\r\n}\r\nexport function vec3ToString(toLog: vec3, precision: number =2): string {\r\n    let s = \"[\";\r\n    for (let i = 0; i < 3; i++) {\r\n        s += toLog[i].toFixed(precision) ;\r\n        if (i < 2) {\r\n            s += \", \";\r\n        }\r\n    }\r\n    s += \"]\";\r\n    return s;\r\n}\r\n", "export class Random {\r\n    _seed: number;\r\n\r\n    static i: Random = new Random(new Date().getTime());\r\n\r\n    static get instance() {\r\n        return Random.i;\r\n    }\r\n\r\n    setSeed(seed: number) {\r\n        this._seed = seed;\r\n    }\r\n\r\n    constructor(seed: number) {\r\n        this._seed = seed;\r\n    }\r\n\r\n    next() {\r\n        let x = Math.sin(this._seed++) * 10000;\r\n        return x - Math.floor(x);\r\n    }\r\n\r\n    nextInt(max: number, min: number = 0) {\r\n        return Math.floor(this.next() * max) + min;\r\n    }\r\n\r\n    nextIntRange(min: number, max: number) {\r\n        return min + this.nextInt(max - min);\r\n    }\r\n\r\n    nextFloat() {\r\n        return this.next();\r\n    }\r\n}\r\n\r\nexport let random = new Random(0);\r\n", "export class SmoothNumber {\r\n    _value: number;\r\n    _velocity: number = 0;\r\n    decay = 0.5;\r\n\r\n    scale = 10;\r\n    vScale = 10;\r\n    get velocity(): number {\r\n        return this._velocity / this.vScale;\r\n    }\r\n    set velocity(value: number) {\r\n        this._velocity = value * this.vScale;\r\n    }\r\n\r\n\r\n    constructor(value: number, decay: number = 0.5, public needScale: boolean = true) {\r\n        this.value = value;\r\n        this.decay = decay;\r\n    }\r\n\r\n    moveTowards(target: number) {\r\n        this.velocity += (target);\r\n    }\r\n\r\n    update() {\r\n        this._value += this.velocity;\r\n        this.velocity *= this.decay;\r\n        if (Math.abs(this._velocity) < 0.000001) {\r\n            this.velocity = 0;\r\n        }\r\n    }\r\n\r\n    get value(): number {\r\n        this.update();\r\n        return this._value / this.scale;\r\n    }\r\n\r\n    set value(value: number) {\r\n        this._value = value * this.scale;\r\n    }\r\n}\r\n", "import IVisible3D from \"./IVisible3D\";\r\nimport {Camera3D} from \"./Camera3D\";\r\nimport {mat4, vec3} from \"gl-matrix\";\r\nimport {World3D} from \"./World3D\";\r\nimport {getCenter} from \"../Math/Math3D\";\r\nimport {drawPlane3D} from \"../Drawer\";\r\nimport {mainCtx} from \"../Consts\";\r\n\r\nexport class Plane3D implements IVisible3D {\r\n    _visible: boolean = true;\r\n    _points: vec3[];\r\n    _world: World3D;\r\n    _rotation: number = 0;\r\n    _axis: vec3 = vec3.fromValues(0, 0, 0);\r\n    _scale: number = 1;\r\n\r\n    _currTransform: mat4 = mat4.create();\r\n\r\n    fillColor = \"rgba(255, 255, 255, 1)\";\r\n    strokeColor = \"black\";\r\n\r\n    get points(): vec3[] {\r\n        return this._points;\r\n    }\r\n\r\n    constructor(p1: vec3, p2: vec3, p3: vec3, p4: vec3) {\r\n        this._points = [p1, p2, p3, p4];\r\n    }\r\n    public static createFrom(pos:vec3, size:vec3){\r\n        return new Plane3D(\r\n            vec3.fromValues(pos[0], pos[1], pos[2]),\r\n            vec3.fromValues(pos[0] + size[0], pos[1], pos[2]),\r\n            vec3.fromValues(pos[0] + size[0], pos[1], pos[2] + size[2]),\r\n            vec3.fromValues(pos[0], pos[1], pos[2] + size[2])\r\n        );\r\n    }\r\n\r\n    setWorld(world: World3D) {\r\n        this._world = world;\r\n    }\r\n\r\n    get world(): World3D {\r\n        return this._world;\r\n    }\r\n\r\n    get center(): vec3 {\r\n        return getCenter(this.points);\r\n    }\r\n\r\n    get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n    set rotation(value: number) {\r\n        this._rotation = value;\r\n    }\r\n    get rotationAxis(): vec3 {\r\n        return this._axis;\r\n    }\r\n\r\n    get scale() {\r\n        return this._scale;\r\n    }\r\n\r\n    render(camera: Camera3D): void {\r\n        if (!this.visible) return;\r\n        if (!this._world) {\r\n            throw new Error(`World is not set for ${this.constructor.name}`);\r\n        }\r\n        mainCtx.fillStyle = this.fillColor;\r\n        // mainCtx.strokeStyle = this.strokeColor;\r\n\r\n        let m = mat4.create();\r\n        mat4.fromTranslation(m, this.center);\r\n        mat4.rotate(m, m, this.rotation, this.rotationAxis)\r\n        mat4.scale(m, m, [this.scale, this.scale, this.scale]);\r\n        let t = this._world.transformMatrix;\r\n        mat4.multiply(m, t, m);\r\n\r\n        this._currTransform = m;\r\n\r\n        let ps = this.points;\r\n        drawPlane3D(ps[0], ps[1], ps[2], ps[3], m);\r\n\r\n    }\r\n\r\n    get visible(): boolean {\r\n        return this._visible;\r\n    }\r\n}\r\n", "export class Point2D {\r\n    arr: number[]\r\n    constructor(x: number, y: number) {\r\n        this.arr = [x, y];\r\n    }\r\n    get x() {\r\n        return this.arr[0];\r\n    }\r\n    set x(value: number) {\r\n        this.arr[0] = value;\r\n    }\r\n    get y() {\r\n        return this.arr[1];\r\n    }\r\n    set y(value: number) {\r\n        this.arr[1] = value;\r\n    }\r\n}", "import {Plane3D} from \"./Plane3D\";\r\nimport {Camera3D} from \"./Camera3D\";\r\nimport {mainCtx} from \"../Consts\";\r\nimport {vec2, vec3} from \"gl-matrix\";\r\nimport {drawLine3D} from \"../Drawer\";\r\nimport {Point2D} from \"../point\";\r\n\r\nexport class GridCell extends Plane3D {\r\n\r\n    _visited: boolean = false;\r\n\r\n    get pos(): Point2D {\r\n        return new Point2D(this.x, this.y);\r\n    }\r\n\r\n    get row(): number {\r\n        return this.y;\r\n    }\r\n    get col(): number {\r\n        return this.x;\r\n    }\r\n\r\n    _hasWall: boolean[] = [true, true, true, true];\r\n\r\n    x: number;\r\n    y: number;\r\n\r\n    get right(): boolean {\r\n        return !this._hasWall[0];\r\n    }\r\n\r\n    set right(value: boolean) {\r\n        this._hasWall[0] = value;\r\n    }\r\n\r\n    get top(): boolean {\r\n        return this._hasWall[1];\r\n    }\r\n\r\n    set top(value: boolean) {\r\n        this._hasWall[1] = value;\r\n    }\r\n\r\n    get left(): boolean {\r\n        return this._hasWall[2];\r\n    }\r\n\r\n    set left(value: boolean) {\r\n        this._hasWall[2] = value;\r\n    }\r\n\r\n    get bottom(): boolean {\r\n        return this._hasWall[3];\r\n    }\r\n\r\n    set bottom(value: boolean) {\r\n        this._hasWall[3] = value;\r\n    }\r\n\r\n    set visited(value: boolean) {\r\n        this._visited = value;\r\n        if (value) {\r\n            this.fillColor = \"rgba(100, 200, 0,1)\";\r\n        } else {\r\n            this.fillColor = \"rgba(255, 255, 255, 1)\";\r\n        }\r\n    }\r\n\r\n    set playerInCell(value: boolean) {\r\n        if (value) {\r\n            this.fillColor = \"rgba(200, 100, 0,1)\";\r\n        } else {\r\n            this.visited = this.visited;\r\n        }\r\n    }\r\n\r\n    public static createFromXY(x: number, y: number) {\r\n        let relaSize = 0.3;\r\n        let pos = vec3.fromValues(x / 2 * relaSize, 0, y / 2*relaSize)\r\n        let size = vec3.fromValues(relaSize, relaSize, relaSize);\r\n        let re = new GridCell(\r\n            vec3.fromValues(pos[0], pos[1], pos[2]),\r\n            vec3.fromValues(pos[0] + size[0], pos[1], pos[2]),\r\n            vec3.fromValues(pos[0] + size[0], pos[1], pos[2] + size[2]),\r\n            vec3.fromValues(pos[0], pos[1], pos[2] + size[2])\r\n        );\r\n        re.x = x;\r\n        re.y = y;\r\n        return re;\r\n    }\r\n\r\n    get visited(): boolean {\r\n        return this._visited;\r\n    }\r\n\r\n    render(camera: Camera3D) {\r\n        super.render(camera);\r\n        let oldStroke = mainCtx.strokeStyle;\r\n        let oldFill = mainCtx.fillStyle;\r\n        let oldLineWidth = mainCtx.lineWidth;\r\n        mainCtx.strokeStyle = \"black\";\r\n        if (this.top) {\r\n            drawLine3D(this._points[3], this._points[0], this._currTransform);\r\n        }\r\n        if (this.left) {\r\n            drawLine3D(this._points[0], this._points[1], this._currTransform);\r\n        }\r\n        if (this.bottom) {\r\n            drawLine3D(this._points[2], this._points[3], this._currTransform);\r\n        }\r\n        if (this.right) {\r\n            drawLine3D(this._points[1], this._points[2], this._currTransform);\r\n        }\r\n\r\n        mainCtx.strokeStyle = oldStroke;\r\n        mainCtx.fillStyle = oldFill;\r\n        mainCtx.lineWidth = oldLineWidth;\r\n    }\r\n\r\n\r\n}\r\n", "import IVisible3D from \"./IVisible3D\";\r\nimport {Camera3D} from \"./Camera3D\";\r\nimport {World3D} from \"./World3D\";\r\nimport {Plane3D} from \"./Plane3D\";\r\nimport {vec3} from \"gl-matrix\";\r\nimport {GridCell} from \"./GridCell\";\r\nimport {random, Random} from \"../Math/Random\";\r\nimport {Point2D} from \"../point\";\r\nimport {IPixelGrid} from \"../IPixelGrid\";\r\n\r\nlet defaultEndX = 9;\r\nlet defaultEndY = 9;\r\n\r\nlet defaultStartX = 0;\r\nlet defaultStartY = 0;\r\n\r\nexport class Grid3D implements IVisible3D, IPixelGrid {\r\n    _visible: boolean = true;\r\n\r\n\r\n    render(camera: Camera3D): void {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            for (let j = 0; j < this.cells[i].length; j++) {\r\n                this.cells[i][j].render(camera);\r\n            }\r\n        }\r\n    }\r\n\r\n    set rotation(value: number) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            for (let j = 0; j < this.cells[i].length; j++) {\r\n                this.cells[i][j].rotation = value;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setWorld(world: World3D) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            for (let j = 0; j < this.cells[i].length; j++) {\r\n                this.cells[i][j].setWorld(world);\r\n            }\r\n        }\r\n    }\r\n\r\n    get visible(): boolean {\r\n        return this._visible;\r\n    }\r\n\r\n    row: number;\r\n    col: number;\r\n    cells: GridCell[][] = [];\r\n\r\n    endCell: GridCell;\r\n    startCell: GridCell;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n\r\n        for (let i = 0; i < row; i++) {\r\n            this.cells.push([]);\r\n            for (let j = 0; j < col; j++) {\r\n                this.cells[i].push(GridCell.createFromXY(i, j));\r\n            }\r\n        }\r\n        // this.endCell = this.cells[defaultEndY][defaultEndX];\r\n        // this.startCell = this.cells[defaultStartY][defaultStartX];\r\n        // this.init();\r\n    }\r\n\r\n    markVisited(pos: Point2D) {\r\n        this.cells[pos.y][pos.x].visited = true;\r\n    }\r\n\r\n    // init() {\r\n    //     this.generate();\r\n    //\r\n    //     this.unvisit();\r\n    //     this.openDoors();\r\n    // }\r\n\r\n    unvisit() {\r\n        for (let i = 0; i < this.row; i++) {\r\n            for (let j = 0; j < this.col; j++) {\r\n                this.cells[i][j].visited = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    openDoors() {\r\n        this.startCell.top = false;\r\n        this.startCell.visited = true;\r\n\r\n        this.endCell.bottom = false;\r\n    }\r\n    /**\r\n     * get all the neighbors of a cell\r\n     * @param cell target cell\r\n     * @returns all the neighbors of a cell\r\n     */\r\n    getCellNeighbors(cell: GridCell) {\r\n        let neighbors: GridCell[] = [];\r\n        if (cell.row > 0) {\r\n            neighbors.push(this.cells[cell.row - 1][cell.col]);\r\n        }\r\n        if (cell.row < this.row - 1) {\r\n            neighbors.push(this.cells[cell.row + 1][cell.col]);\r\n        }\r\n        if (cell.col > 0) {\r\n            neighbors.push(this.cells[cell.row][cell.col - 1]);\r\n        }\r\n        if (cell.col < this.col - 1) {\r\n            neighbors.push(this.cells[cell.row][cell.col + 1]);\r\n        }\r\n        return neighbors;\r\n    }\r\n    /**\r\n     * Remove the walls between two cells\r\n     * @param a cell a\r\n     * @param b cell b\r\n     */\r\n    removeWalls(a: GridCell, b: GridCell) {\r\n        let x = a.col - b.col;\r\n        if (x === 1) {\r\n            a.left = false;\r\n            b.right = false;\r\n        } else if (x === -1) {\r\n            a.right = false;\r\n            b.left = false;\r\n        }\r\n        let y = a.row - b.row;\r\n        if (y === 1) {\r\n            a.top = false;\r\n            b.bottom = false;\r\n        } else if (y === -1) {\r\n            a.bottom = false;\r\n            b.top = false;\r\n        }\r\n    }\r\n\r\n    setPixel(x: number, y: number, color: string): void {\r\n        let cell = this.cells[y][x];\r\n        cell.fillColor = color;\r\n    }\r\n}\r\n", "import {mat4} from \"gl-matrix\";\r\n\r\nexport class PerspectiveProjection {\r\n    constructor(public fov: number, public aspect: number, public near: number, public far: number) {\r\n    }\r\n\r\n    get transformMatrix(): mat4 {\r\n        let m = mat4.create();\r\n        mat4.perspective(m, this.fov, this.aspect, this.near, this.far);\r\n        return m;\r\n    }\r\n\r\n    transformTo(t: mat4): mat4 {\r\n        let m = this.transformMatrix;\r\n        mat4.multiply(m, t, m);\r\n        return m;\r\n    }\r\n}\r\n", "import {IPixelGrid} from \"./IPixelGrid\";\r\nimport {scoreText} from \"./Consts\";\r\n\r\nexport class GameGrid {\r\n    _pixels: string[][] = [];\r\n    pixelGrid: IPixelGrid;\r\n\r\n    zones: DangerZone[] = [];\r\n    coins: Coin[] = [];\r\n    player: Player;\r\n\r\n    updateCount = 0;\r\n\r\n    turnNumber = 100;\r\n\r\n    constructor(public rows: number, public cols: number, pixelGrid: IPixelGrid) {\r\n        for (let y = 0; y < rows; y++) {\r\n            this._pixels[y] = [];\r\n            for (let x = 0; x < cols; x++) {\r\n                this._pixels[y][x] = \"white\";\r\n            }\r\n        }\r\n        this.player = new Player(Math.floor(cols / 2), Math.floor(rows / 2));\r\n        this.pixelGrid = pixelGrid;\r\n    }\r\n\r\n    onGameEnd() {\r\n\r\n    }\r\n\r\n    movePlayer(x: number, y: number) {\r\n        if (this.player.x + x >= 0 && this.player.x + x < this.cols && this.player.y + y >= 0 && this.player.y + y < this.rows) {\r\n            this.player.x += x;\r\n            this.player.y += y;\r\n        }\r\n    }\r\n\r\n    clearPixels() {\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this._pixels[y][x] = \"white\";\r\n            }\r\n        }\r\n    }\r\n\r\n    updatePixels() {\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.pixelGrid.setPixel(x, y, this._pixels[y][x]);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawChildren() {\r\n        this.clearPixels();\r\n\r\n        for (let i = 0; i < this.zones.length; i++) {\r\n            this.drawZone(this.zones[i]);\r\n        }\r\n        for (let i = 0; i < this.coins.length; i++) {\r\n            this.drawPixel(this.coins[i].x, this.coins[i].y, this.coins[i].color);\r\n        }\r\n        this.drawPixel(this.player.x, this.player.y, this.player.color);\r\n        this.updatePixels();\r\n    }\r\n\r\n    drawZone(zone: DangerZone) {\r\n        for (let i = zone.x; i < zone.x + zone.w; i++) {\r\n            for (let j = zone.y; j < zone.y + zone.h; j++) {\r\n                this._pixels[j][i] = zone.color;\r\n            }\r\n        }\r\n    }\r\n\r\n    drawPixel(x: number, y: number, color: string) {\r\n        this._pixels[y][x] = color;\r\n    }\r\n\r\n    updateChildren() {\r\n        this.player.update();\r\n        for (let i = 0; i < this.zones.length; i++) {\r\n            this.zones[i].update();\r\n        }\r\n        for (let i = 0; i < this.coins.length; i++) {\r\n            this.coins[i].update();\r\n        }\r\n    }\r\n\r\n    updateLogic() {\r\n        for (let i = 0; i < this.zones.length; i++) {\r\n            let currZone = this.zones[i];\r\n            if (currZone.inRange(this.player)) {\r\n                // this.player.takeDamage(currZone.damage);\r\n                this.onGameEnd();\r\n            }\r\n            if (currZone.ended) {\r\n                this.zones.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.coins.length; i++) {\r\n            let currCoin = this.coins[i];\r\n            if (currCoin.inRange(this.player)) {\r\n                this.player.addCoin();\r\n                currCoin.collect();\r\n\r\n            }\r\n            if (!currCoin.activated) {\r\n                this.coins.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        this.updateChildren();\r\n        this.updateLogic();\r\n        this.drawChildren();\r\n\r\n        if (this.updateCount % 50 == 0) {\r\n            this.zones.push(DangerZone.createRandom(this.cols, this.rows));\r\n\r\n        }\r\n        if (this.updateCount % 300 == 0) {\r\n            this.coins.push(Coin.createRandom(this.cols, this.rows));\r\n        }\r\n        this.updateCount++;\r\n    }\r\n\r\n    getCell(x: number, y: number): string {\r\n        return this._pixels[y][x];\r\n    }\r\n}\r\n\r\nclass Coin {\r\n    vanishTime = 200;\r\n    updateCount = 0;\r\n\r\n    public static createRandom(cols: number, rows: number): Coin {\r\n        let x = Math.floor(Math.random() * cols);\r\n        let y = Math.floor(Math.random() * rows);\r\n        return new Coin(x, y);\r\n    }\r\n\r\n    constructor(public x: number, public y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    activated = true;\r\n\r\n    collect() {\r\n        this.activated = false;\r\n    }\r\n\r\n    _blinkState = false;\r\n\r\n    update() {\r\n        if (!this.activated) {\r\n            return;\r\n        }\r\n        if (this.updateCount > this.vanishTime) {\r\n            this.activated = false;\r\n        }\r\n\r\n        if (this.updateCount % 30 == 0) {\r\n            this._blinkState = !this._blinkState;\r\n        }\r\n\r\n        this.updateCount++;\r\n    }\r\n\r\n    get color() {\r\n        // console.log(`this._blinkState: ${this._blinkState}`);\r\n\r\n        if (this._blinkState) {\r\n            return `#FFD700`;\r\n        }\r\n        return \"orange\";\r\n    }\r\n\r\n    inRange(player: Player) {\r\n        return this.activated && this.x == player.x && this.y == player.y;\r\n    }\r\n}\r\n\r\nclass Zone {\r\n    updateCount = 0;\r\n\r\n    constructor(public x: number, public y: number, public w: number, public h: number) {\r\n    }\r\n\r\n    get color(): string {\r\n        if (this.activated) {\r\n            return \"red\";\r\n        }\r\n        return `rgba(255, 100, 100, ${this.updateCount / 100})`;\r\n    }\r\n\r\n    update() {\r\n        this.updateCount++;\r\n    }\r\n\r\n    get activated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get ended(): boolean {\r\n        return true;\r\n    }\r\n\r\n    inRange(player: Player): boolean {\r\n        if (this.activated) {\r\n            return player.x >= this.x && player.x < this.x + this.w && player.y >= this.y && player.y < this.y + this.h;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nclass DangerZone extends Zone {\r\n    damage: number = 1;\r\n\r\n    static createRandom(cols: number, rows: number): DangerZone {\r\n        let x = Math.floor(Math.random() * cols);\r\n        let y = Math.floor(Math.random() * rows);\r\n\r\n        let w = Math.floor(Math.random() * cols -1);\r\n        if (w < 3) {\r\n            w = 3;\r\n        }\r\n        if (w > cols - x) {\r\n            w = cols - x;\r\n        }\r\n        let h = Math.floor(Math.random() * rows -1);\r\n        if (h < 3) {\r\n            h = 3;\r\n        }\r\n        if (h > rows - y) {\r\n            h = rows - y;\r\n        }\r\n        return new DangerZone(x, y, w, h);\r\n    }\r\n\r\n    get activated(): boolean {\r\n        return this.updateCount > 100;\r\n    }\r\n\r\n    get ended(): boolean {\r\n        return this.updateCount > 200;\r\n    }\r\n}\r\n\r\nclass Player {\r\n    x: number;\r\n    y: number;\r\n\r\n    defaultX: number;\r\n    defaultY: number;\r\n\r\n    coins = 0;\r\n\r\n    addCoin() {\r\n        this.coins++;\r\n        scoreText.innerText = `Score: ${this.coins}`;\r\n    }\r\n\r\n    get color() {\r\n        return \"green\";\r\n    }\r\n\r\n    constructor(defaultX: number, defaultY: number) {\r\n        this.x = defaultX;\r\n        this.y = defaultY;\r\n        this.defaultX = defaultX;\r\n        this.defaultY = defaultY;\r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    kill() {\r\n        this.x = this.defaultX;\r\n        this.y = this.defaultY;\r\n    }\r\n\r\n    takeDamage(damage: number) {\r\n        this.kill();\r\n    }\r\n}\r\n", "import {clearCanvas, drawBackground, drawHermitCurve} from \"./Drawer\";\r\nimport {OrthographicProjection} from \"./Object3Ds/OrthographicProjection\";\r\nimport {mat4, vec2} from \"gl-matrix\";\r\nimport {Camera3D} from \"./Object3Ds/Camera3D\";\r\nimport {World3D} from \"./Object3Ds/World3D\";\r\nimport {TriangularPrism} from \"./Object3Ds/TriangularPrism\";\r\nimport {viewport} from \"./Object3Ds/Viewport\";\r\nimport {mat4ToString} from \"./Debug\";\r\nimport {\r\n    curveSize,\r\n    eyeX,\r\n    eyeY,\r\n    eyeZ,\r\n    mainCtx,\r\n    prismPos, scoreText, startBtn,\r\n    targetX,\r\n    targetY,\r\n    targetZ,\r\n    upX,\r\n    upY,\r\n    upZ,\r\n    worldX,\r\n    worldY\r\n} from \"./Consts\";\r\nimport {Random} from \"./Math/Random\";\r\nimport IVisible3D from \"./Object3Ds/IVisible3D\";\r\nimport {Plane3D} from \"./Object3Ds/Plane3D\";\r\nimport {SmoothNumber} from \"./SmoothNumber\";\r\nimport {Grid3D} from \"./Object3Ds/Grid3D\";\r\nimport {PerspectiveProjection} from \"./Object3Ds/PerspectiveProjection\";\r\nimport Game from \"./Game\";\r\nimport {GameGrid} from \"./GameGrid\";\r\nimport {isGeneratorFunction} from \"util/types\";\r\n\r\nlet frame = 0;\r\n\r\nlet colorFrame = 0;\r\n\r\nlet wheelOffset = new SmoothNumber(0.002, 0.96);\r\n\r\nlet playingDeadAnimation = false;\r\nlet deadAnimation = 0;\r\nlet deadAnimationDuration = 60;\r\n\r\nexport function frameLog(...args: any[]) {\r\n    if (frame % 120 == 1)\r\n        console.log(...args);\r\n}\r\n\r\nlet rows = 11;\r\nlet cols = 11;\r\nlet grid = new Grid3D(rows, cols);\r\nlet gameGrid = getGame()\r\n\r\nfunction getGame() {\r\n    let game = new GameGrid(rows, cols, grid);\r\n    game.onGameEnd = onGameEnd;\r\n    return game;\r\n}\r\n\r\nlet isPlaying = false;\r\n\r\nfunction startGame() {\r\n    playingDeadAnimation = false;\r\n    deadAnimation = 0;\r\n    gameGrid = getGame();\r\n}\r\n\r\nexport function frameUpdate() {\r\n\r\n    frame++;\r\n    colorFrame++;\r\n\r\n\r\n\r\n    // console.log(\"frameUpdate\");\r\n    let background = `hsl(${(colorFrame / 10) % (360)}, 50%, 50%)`;\r\n    if (playingDeadAnimation) {\r\n        let saturation = 150 - Math.min(100, deadAnimation / deadAnimationDuration * 100);\r\n        background = `hsl(${(0) % (360)}, ${saturation}%, 50%)`;\r\n        deadAnimation++;\r\n        if (deadAnimation > deadAnimationDuration) {\r\n            playingDeadAnimation = false;\r\n            deadAnimation = 0;\r\n            colorFrame = 0;\r\n        }\r\n    }\r\n\r\n    drawBackground(background);\r\n\r\n    frameLog(grid.toString())\r\n\r\n\r\n    // let projection = OrthographicProjection.create(wheelOffset.value);\r\n    let projection = new PerspectiveProjection(wheelOffset.value, 1, 100, 10000000);\r\n    let camera = new Camera3D();\r\n    let world = new World3D();\r\n\r\n    camera.setEye([eyeX.valueAsNumber, eyeY.valueAsNumber, eyeZ.valueAsNumber]);\r\n    camera.setTarget([targetX.valueAsNumber, targetY.valueAsNumber, targetZ.valueAsNumber]);\r\n    camera.setUp([upX.valueAsNumber, upY.valueAsNumber, upZ.valueAsNumber]);\r\n\r\n    world.move(worldX.valueAsNumber, 0, worldY.valueAsNumber);\r\n    world._scale = wheelOffset.value;\r\n\r\n    let projectionTransform = projection.transformTo(viewport);\r\n    let cameraTransform = camera.transformTo(projectionTransform);\r\n    let worldTransform = world.transformTo(cameraTransform);\r\n\r\n    let curveTransform = mat4.create();\r\n    mat4.translate(curveTransform, curveTransform, [0, 0, 0]);\r\n    mat4.scale(curveTransform, curveTransform, [1, 1, 1]);\r\n    mat4.multiply(curveTransform, worldTransform, curveTransform);\r\n\r\n\r\n    let random = Random.instance;\r\n    random.setSeed(0);\r\n\r\n    function randomVal() {\r\n        return random.nextFloat() * 2 - 1;\r\n    }\r\n\r\n    let pos = prismPos.valueAsNumber / 100 * 2 - 1;\r\n\r\n    function getRandPrism() {\r\n        let ctlIndex = random.nextInt(4);\r\n        if (ctlIndex == 0) {\r\n            return TriangularPrism.createRegularPrism([pos, randomVal(), randomVal()], random.nextInt(3) + 1)\r\n        }\r\n        if (ctlIndex == 1) {\r\n            return TriangularPrism.createRegularPrism([randomVal(), pos, randomVal()], random.nextInt(3) + 1)\r\n        }\r\n        if (ctlIndex == 2) {\r\n            return TriangularPrism.createRegularPrism([randomVal(), randomVal(), pos], random.nextInt(3) + 1)\r\n        }\r\n        if (ctlIndex == 3) {\r\n            return TriangularPrism.createRegularPrism([randomVal(), randomVal(), randomVal()], random.nextInt(3) + 1)\r\n        }\r\n    }\r\n\r\n    let objects: IVisible3D[] = [\r\n        getRandPrism(),\r\n        getRandPrism(),\r\n        getRandPrism(),\r\n        getRandPrism(),\r\n        grid\r\n\r\n    ];\r\n    if (isPlaying) {\r\n        gameGrid.update();\r\n    }\r\n\r\n    for (let i = 0; i < objects.length; i++) {\r\n        let object = objects[i];\r\n        object.setWorld(world);\r\n        object.rotation += frame / 100 + i;\r\n        object.render(camera)\r\n    }\r\n\r\n    function drawRandomCurve() {\r\n        mainCtx.strokeStyle = `hsla(${random.nextInt(255)}, 20%, 80% , 0.5)`;\r\n        mainCtx.lineWidth = 0.01/ wheelOffset.value;\r\n        let curve = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            let size = curveSize.valueAsNumber;\r\n            curve.push([randomVal() * size, randomVal()*size, randomVal()*size]);\r\n        }\r\n        drawHermitCurve(curve, curveTransform);\r\n    }\r\n\r\n    drawRandomCurve();\r\n    drawRandomCurve();\r\n    drawRandomCurve();\r\n\r\n\r\n    mainCtx.lineWidth = 0.0003 / wheelOffset.value;\r\n\r\n    frameLog(`projectionTransform: \\n${mat4ToString(projectionTransform)}`);\r\n    frameLog(`cameraTransform: \\n${mat4ToString(cameraTransform)}`);\r\n    frameLog(`worldTransform: \\n${mat4ToString(worldTransform)}`);\r\n\r\n}\r\n\r\nexport function onWheel(e: WheelEvent) {\r\n    // console.log(\"onWheel\");\r\n    // console.log(e);\r\n\r\n    wheelOffset.moveTowards(e.deltaY / 2000000);\r\n\r\n}\r\n\r\nexport function onKeyDow(e: KeyboardEvent) {\r\n    console.log(\"onKeyDown\");\r\n    console.log(e);\r\n\r\n    if (e.key == \"ArrowUp\" || e.key == \"w\") {\r\n        gameGrid.movePlayer(0, -1);\r\n    }\r\n    if (e.key == \"ArrowDown\" || e.key == \"s\") {\r\n        gameGrid.movePlayer(0, 1);\r\n    }\r\n    if (e.key == \"ArrowLeft\" || e.key == \"a\") {\r\n        gameGrid.movePlayer(1, 0);\r\n    }\r\n    if (e.key == \"ArrowRight\" || e.key == \"d\") {\r\n        gameGrid.movePlayer(-1, 0);\r\n    }\r\n}\r\n\r\nexport function onGameEnd() {\r\n    console.log(\"onGameEnd\");\r\n    scoreText.innerText = `Final Score: ${gameGrid.player.coins}`;\r\n    playingDeadAnimation = true;\r\n    // frame = 0;\r\n    gameGrid = getGame();\r\n    isPlaying = false;\r\n\r\n\r\n    startBtn.style.display = \"block\";\r\n    startBtn.innerText = \"Restart\";\r\n}\r\n\r\nexport function onDrag(event: PointerEvent, lastPos: vec2, pos: vec2) {\r\n    // console.log(\"onDrag\");\r\n    // console.log(lastPos);\r\n    // console.log(pos);\r\n\r\n    // console.log(event.buttons);\r\n\r\n    if (event.buttons === 4) {\r\n        eyeZ.valueAsNumber += (pos[0] - lastPos[0]);\r\n        eyeX.valueAsNumber += (pos[1] - lastPos[1]);\r\n    }\r\n    if (event.buttons  === 2) {\r\n        targetZ.valueAsNumber -= (pos[0] - lastPos[0]) / 2;\r\n        targetX.valueAsNumber += (pos[1] - lastPos[1]) / 2;\r\n    }\r\n    if (event.buttons  === 1) {\r\n        worldY.valueAsNumber -= (pos[0] - lastPos[0]) /5;\r\n        worldX.valueAsNumber += (pos[1] - lastPos[1]) /5;\r\n    }\r\n\r\n\r\n}\r\nexport function onStart(){\r\n    console.log(\"onStart\");\r\n    scoreText.style.display = \"block\";\r\n    gameGrid = getGame();\r\n    isPlaying = true;\r\n}\r\n", "import {frameUpdate, onDrag, onKeyDow, onWheel} from \"./Events\";\r\nimport {mainCanvas, mainCtx} from \"./Consts\";\r\n\r\nexport function runFrameUpdate() {\r\n    frameUpdate();\r\n    window.requestAnimationFrame(runFrameUpdate);\r\n}\r\n\r\nlet dragging = false;\r\n\r\nlet lastPos: [number, number] = null;\r\n\r\nexport function initEvents() {\r\n    runFrameUpdate();\r\n    mainCanvas.onwheel = (e) => {\r\n        e.preventDefault();\r\n        onWheel(e);\r\n    }\r\n    window.onkeydown = (e) => {\r\n        e.preventDefault();\r\n        onKeyDow(e);\r\n    }\r\n    mainCanvas.onpointerdown = (e) => {\r\n        e.preventDefault();\r\n        dragging = true;\r\n        lastPos = [e.clientX, e.clientY];\r\n    }\r\n    mainCanvas.onpointerup = (e) => {\r\n        e.preventDefault();\r\n        dragging = false;\r\n        lastPos = null;\r\n    }\r\n    mainCanvas.onpointermove = (e) => {\r\n        e.preventDefault();\r\n        if (dragging) {\r\n            if (lastPos != null) {\r\n                onDrag(e, lastPos, [e.clientX, e.clientY]);\r\n            }\r\n        }\r\n        lastPos = [e.clientX, e.clientY];\r\n    }\r\n}\r\nexport default function initAll() {\r\n    initEvents();\r\n}\r\n", "import { mat4 } from \"gl-matrix\";\r\nimport initAll from \"./Init\";\r\n\r\nexport default class Game{\r\n    constructor(){\r\n        console.log(\"Hello World\");\r\n    }\r\n\r\n    start(){\r\n        console.log(\"Game started\");\r\n\r\n        let mat = mat4.create();\r\n        console.log(mat);\r\n\r\n        initAll();\r\n    }\r\n}\r\n", "import Game from \"./Game\";\r\n\r\nconsole.log(\"loading Main.ts\");\r\n\r\n\r\nlet game = new Game();\r\ngame.start();\r\n"],
  "mappings": "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",
  "names": ["len", "scale", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "min", "max", "controls", "step", "scale", "dot", "max", "min", "random", "rows", "cols", "game", "random", "lastPos"]
}
